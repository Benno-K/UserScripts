#!/bin/bash

# Help text
usage () {
  if [ ${1} -gt 0 ]; then
    outto=2
   else
     outto=1
  fi
  cat <<EOI >&${outto}
 Usage ${0} [option [option]] [output file basename] [year]
  Options:
  -fmt
   format of output file(s)
	 supported values:
    gif eps pdf png svg
		html creates a canvas,
		but nothing is shown
  -h -help --help
   display usage info
    -log
   use logarithmic scale for time values
	-rgbup <color>
	-rgbdown <color>
		specify gnuplot rgb color
		for upstream and downstrean
		boxes (e.g. red, #ff0000
		etc.)
EOI
  if [ ${1} == 0 ]; then
  cat <<EOI >&${outto}
  Synopsis:
   ${bn} uses the logfiles of
   a FRITZ!box collected by
   fblogfetch to create a
   diagram showing the 
   data rates over the year.
EOI
 fi
  exit ${1}
}

# get rates from Fritzbox log and create a CSV of it
ratesFromLog () {
  ((prevYear=${1}-1))
  ((nextYear=${1}+1))
	[ -s ${logdir}/fblog-${prevYear}.log ] && awk '/ kbit\/s/{dt=$1;tm=$2;idx=index($9,"/");last=sprintf("%s %s;%s;%s\n",$1,$2,substr($9,1,idx-1),substr($9,idx+1))};END{printf last}' ${logdir}/fblog-${prevYear}.log
	awk '/ kbit\/s/{dt=$1;tm=$2;idx=index($9,"/");printf("%s %s;%s;%s\n",$1,$2,substr($9,1,idx-1),substr($9,idx+1))}' ${logdir}/fblog-${1}.log
	[ -s ${logdir}/fblog-${nextYear}.log ] && awk '/ kbit\/s/{dt=$1;tm=$2;idx=index($9,"/");printf("%s %s;%s;%s\n",$1,$2,substr($9,1,idx-1),substr($9,idx+1));exit}' ${logdir}/fblog-${nextYear}.log
}

# What is our name?
bn=$(basename $0)

# name for temporary file
tmpnam="${HOME}/.${bn}"
fn="$tmpnam-XXXXXX-rate.tmp"

# where the logs are
logdir=~pi/fblogs
# default output format
oformat="png"

# font used for annotations
fontname="Calibra"

# colors for boxes of up-/downstream
rgbdown="#99ccff"
rgbup="#ff9933"

# parse commamd line 
while [ "${1:0:1}" == "-" ]
do
	if [ "${1}" == "-log" ];then
		shift
		scalecmd="set logscale y"
		continue
	fi
	if [[ ${1} =~ ^-[h\-][help]*$ ]];then
		usage 0
	fi
	if [ "${1}" == "-fmt" ];then
		# As soon as -fmt is
		# present the first time
		# ALL wanted formats need
		# to be specified -fmt!
		# otherwise we would ALWAYS
		# create a png
		if [ "${oformat}" = "png" ]; then
			oformat=""
		fi
		shift
		if [[ ${1} =~ "," ]]; then
			oformat=$(echo ${1}|sed -e 's/,/ /g')
		else
		  oformat="${oformat}${1} "
		fi
		shift
		continue
	fi
	if [ "${1}" == "-rgbup" ];then
		shift
	  rgbup="${1}"
		shift
		continue
	fi
	if [ "${1}" == "-rgbdown" ];then
		shift
	  rgbdown="${1}"
		shift
		continue
	fi
	echo >&2 "Illegal option: ${1}  - see ${bn} -h for help"
	exit 2
done

# get 2-digit year of some line
yeartoplot="$(head -2000 ${logdir}/fblog-${2}.log|tail -1|awk '{print substr($0,7,2)}')"

# create a tempfile for input
outfil=$(mktemp "${fn}")

# basename fog all output files
if [ "${1}" == "" ]; then
	read -p "Output file basename: " ofbn
else
  ofbn=${1}-${2}
fi

stamp="Erstellt am $(date +%d.%m.%Y) um $(date +%H:%M:%S) mit ${bn} durch gnuplot"

# for the formats not directly
# corresponding to the terminal
# type, set it
for of in ${oformat}
	do
	term=${of}
	if [ "${of}" == "html" ]; then
		term="canvas"
	fi
	if [ "${of}" == "eps" ]; then
		term="epscairo"
	fi
	if [ "${of}" == "png" ]; then
		term="pngcairo"
	fi

	# add headers to datafile
  tmp=${outfil}
	echo '"Zeit";"downstream";"upstream"' > ${outfil}

	# copy data to datafile
  ratesFromLog ${2} >> ${outfil}

	# tell outputfile
	echo ${ofbn}.${of}

	# get 2-year digits from
	# filename
	offsetposition=${#ofbn}
	((offsetposition=${offsetposition}-4))
	tyear=${ofbn:${offsetposition}}

	# now plot
  gnuplot <<EOI
# make month name abbr. German
# im x-axis annotation
set locale "de_DE.UTF-8"

# make a horizontal, dark grid
# in front of all other objects
set grid ytics layerdefault front lt 1 lc rgb "#999966"

# make the legend (called key
# in gnuplot)
# arrrange vertically, symbol
# before text, position will
# define the left side of the
# legend, coordinates are 
# relative to graph, set font,
# left align legend title,
# define title text, set key
# title font
set key vertical reverse
# set key at graph 0.27,-0.14 right
set key at graph 0.11,1.15 right
set key title font "${fontname},8"
set key title left
set key title "Ãœbertragungsrichtung"
set key font "${fontname},8"

# the title of the graph
# including year in smaller
# font
set title font "${fontname},22"
set title "DSL Geschwindigkeit  {/*0.6 ${tyear}}"
set title offset 4,0

# fineprint info about the
# graph as vertical label
set label font "${fontname},6" rotate by -90
set label 1 "${stamp}" at graph 1.02,0.5 center

# axis labelling
set xlabel 'Monat' font "${fontname},12" 
set ylabel 'Datenrate  {/*0.5 Kbit/s}' font "${fontname},12" offset -0.8,0

# show only bottom and left
# axis ticks
set xtics out font "${fontname},10" nomirror
set ytics out rotate by 45 scale 1.6 nomirror

# make it a 16:9 horizontal
# graph ( so divide 9 by 16 )
set size ratio 0.56

# make the boxes fill the
# whole x-axis
set boxwidth 1.0 relative

# set logarithmic scale if
# requested by -log
${scalecmd}

# fill the whole box with
# color
set style fill solid 1.0 border 0.1

# expect ;-separated CSV-input
set datafile separator ';'

# set output type and filename
set terminal ${term}
set output "${ofbn}.${of}"

# x-data are time-values, use
# localized abbreviated month
# on axis
set xdata time
set timefmt "%d.%m.%y %H:%M:%S"
set format x "%b"

# ensure the graph expands to
# the while even if there is
# data missing 
set yrange [0:*]
set xrange ["01.01.${yeartoplot}":"31.12.${yeartoplot}"]

# set the boxes colors
set lt 1 lc rgb "${rgbdown}"
set lt 2 lc rgb "${rgbup}"

# finally plot the whole shit
# using the first data line
# as column headers
plot for [i=2:3] "${outfil}" using 1:i title columnhead(i) w boxes
EOI
	done # for this ${of}

# kill tempfile
rm -f ${outfil}
exit
